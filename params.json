{"name":"Light ws2812","tagline":"Light weight library to control WS2811/WS2812 based LEDS and LED Strings for 8-Bit AVR microcontrollers.","body":"light_ws2812\r\n============\r\n\r\nLight weight library to control WS2811/WS2812 based LEDS and LED Strings for 8-Bit AVR microcontrollers.\r\n\r\n\r\nDescription\r\n===========\r\n\r\nThis is a small Ansi-C library to control WS2811/WS2812 based RGB Leds and strings. Only the 800kHz\r\nhigh-speed mode is supported. This library uses a bit-banging approach with cycle optimized assembler\r\ninnerloops. Some advantages of this approach compared to existing solutions are:\r\n\r\n- Compatible to all AVR MCUs since it does not rely on special periphery.\r\n- Low hardware footprint: Does not rely on any timer or the USI\r\n- Much smaller program code: Size optimized assembler without unrolled loops (<50 bytes in most cases)\r\n- No initialization required\r\n- Carefully optimized to use instructions which are available on all AVR cores and have the same instruction timing across all devices.\r\n- Supports standard AVR, reduced core AVR (Attiny 4/5/9/10/20/40) and XMEGA (untested) without special case handling.\r\n- Arduino or C++ not required\r\n- Clock speeds down to 4Mhz supported.\r\n\r\nA disadvantage of this approach is that the code has to be hand optimized for each CPU clockspeed. \r\nHowever, a number of different routines are provided which support CPU clocks from 4Mhz to 16Mhz.\r\n\r\nUsage\r\n=====\r\n\r\n- Add \"light_ws2812.c\" and \"light_ws2812.h\" to your project.\r\n- Make sure optimizations are enabled in the compiler.\r\n- Change ws2812_port and ws2812_pin in the include file according to the I/O pin you are using.\r\n- Uncomment the #define appropiate for your clock settings. If your exact clock is not supported, \r\n  try a higher or lower clock setting. The WS2811 controller chip is tolerant to some timing inaccuracy.\r\n- Set the data output register for the output pin you are using.\r\n- Call \"ws2812_sendarray\" with a pointer to your LED data and the number of bytes to transmit.\r\n  Each LED receives 3 bytes in Green-Red-Blue order. Therefore the total number of bytes should\r\n  be three times the number of LEDs in the chain.\r\n- Alternatively you can use ws2813_sendarray_mask, which allows to specify one or more output pins\r\n  on the same port.\r\n- Wait for at least 50 us before the next LED update to reset the chain.\r\n\r\nA simple example is provided in \"test_rgb_blinky.c\"\r\n\r\nRelease History\r\n================\r\n\r\n- v0.3 2013/05/06 \r\n\t- Initial release. Thanks to \"Matthias H.\" for testing with a longer led chain.\r\n- v0.4 2013/05/07 \r\n\t- General clean up \r\n\t- Some code size optimizations. Thanks to \"Fallobst\" for suggestions \r\n\t- Disabled interrupts in the critical sections.\r\n- v0.5 2013/05/20\r\n\t- Fixed timing bug from size optimization\r\n- v0.6 2013/05/27\r\n\t- Major update: Changed all port accesses from SBI/CBI to OUT. This removes \r\n\ta timing inconsistency between reduced core AVR and standard AVR, avoiding separate\r\n\timplementations for different cores. A disadvantage is increase register usage.\r\n\t- Added the \"ws2812_sendarray_mask\" function which allows to pass a bitmask for the\r\n\t selected port. This allows controlling up to 8 independent LED strips.\r\n\t- Removed functions for interrupt handling. Avoiding interference with interrupts\r\n\tis now up to the user. \r\n\t- 4 MHz clock speed is now also supported for standard core AVRs.\r\n- v0.7 2013/05/28\r\n\t- Optimized timing and size of 8 and 12 Mhz routines. All routines are within \r\n\t  datasheet specs now, except of 9.6 Mhz which is marginally off but works under\r\n\t  all test conditions\t\r\n- v0.8 2013/06/03\r\n\t- 9.6 Mhz implementation now within specifications.\r\n\t- brvs->brcs. Loops terminate correctly (thanks to Mario Pieschel).\r\n\r\n Tested Combinations\r\n ================\r\n\r\n| Device             | 4 MHz  | 8 MHz  | 9.6 MHz | 12 MHz | 16 MHz |\r\n| -------------       |:-------:| :-----: | :------: | :----:| :---:|\r\n| ATtiny 85 (Standard Core )| X      |  X     |         |       |  X   | \r\n| ATtiny 13 (Standard Core)|        |        |    X    |       |     | \r\n| ATmega 8 (Standard Core)|        |        |         |   X    |     | \r\n| ATtiny 10 (Reduced Core)| X      |  X     |         |       |     | \r\n\r\nPlease find updates on https://github.com/cpldcpu/light_ws2812\r\n\r\nbug reports etc: cpldcpu@gmail.com\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}